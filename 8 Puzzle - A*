class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g
        self.h = h
        self.f = g + h

def misplaced_tiles(state, goal):
    count = 0
    for i in range(9):
        if state[i] != 0 and state[i] != goal[i]:
            count += 1
    return count

def expand(node, goal):
    neighbors = []
    state = node.state
    blank = state.index(0)

    moves = {
        0: [1, 3],
        1: [0, 2, 4],
        2: [1, 5],
        3: [0, 4, 6],
        4: [1, 3, 5, 7],
        5: [2, 4, 8],
        6: [3, 7],
        7: [4, 6, 8],
        8: [5, 7]
    }

    for m in moves[blank]:
        new_state = state[:]
        new_state[blank], new_state[m] = new_state[m], new_state[blank]
        h = misplaced_tiles(new_state, goal)
        neighbors.append(Node(new_state, node, node.g + 1, h))
    return neighbors

def reconstruct_path(node):
    path = []
    while node:
        path.append(node.state)
        node = node.parent
    return path[::-1]

def a_star(start, goal):
    open_list = []
    closed_set = set()

    h = misplaced_tiles(start, goal)
    start_node = Node(start, None, 0, h)
    open_list.append(start_node)

    while open_list:
        open_list.sort(key=lambda x: x.f)
        current = open_list.pop(0)   

        if current.state == goal:
            return reconstruct_path(current)

        closed_set.add(tuple(current.state))

        for neighbor in expand(current, goal):
            if tuple(neighbor.state) in closed_set:
                continue
            open_list.append(neighbor)

    return None

if __name__ == "__main__":
    print("Enter START state (9 numbers, use 0 for blank):")
    start = list(map(int, input().split()))

    print("Enter GOAL state (9 numbers, use 0 for blank):")
    goal = list(map(int, input().split()))

    solution = a_star(start, goal)

    if solution:
        print("\nSolution found in", len(solution)-1, "moves:")
        for s in solution:
            print(s[0:3])
            print(s[3:6])
            print(s[6:9])
            print()
    else:
        print("No solution found!")
