import math

def print_board(b):
    for row in b:
        print(" | ".join(row))
        print("-" * 5)

def evaluate(b):
    for i in range(3):
        if b[i][0] == b[i][1] == b[i][2] != ' ': return 10 if b[i][0] == 'O' else -10
        if b[0][i] == b[1][i] == b[2][i] != ' ': return 10 if b[0][i] == 'O' else -10
    if b[0][0] == b[1][1] == b[2][2] != ' ': return 10 if b[0][0] == 'O' else -10
    if b[0][2] == b[1][1] == b[2][0] != ' ': return 10 if b[0][2] == 'O' else -10
    return 0

def moves_left(b): return any(c == ' ' for row in b for c in row)

def minimax(b, is_max):
    score = evaluate(b)
    if score or not moves_left(b): return score
    best = -math.inf if is_max else math.inf
    for i in range(3):
        for j in range(3):
            if b[i][j] == ' ':
                b[i][j] = 'O' if is_max else 'X'
                val = minimax(b, not is_max)
                b[i][j] = ' '
                best = max(best, val) if is_max else min(best, val)
    return best

def best_move(b):
    best, move = -math.inf, (-1, -1)
    for i in range(3):
        for j in range(3):
            if b[i][j] == ' ':
                b[i][j] = 'O'
                score = minimax(b, False)
                b[i][j] = ' '
                if score > best:
                    best, move = score, (i, j)
    return move

def main():
    board = [[' ']*3 for _ in range(3)]
    print_board(board)
    while moves_left(board) and not evaluate(board):
        try:
            r, c = map(int, input("Your move (1-3 1-3): ").split())
            if board[r-1][c-1] != ' ': raise ValueError
            board[r-1][c-1] = 'X'
        except: print("Invalid move."); continue
        if evaluate(board) or not moves_left(board): break
        ai_r, ai_c = best_move(board)
        board[ai_r][ai_c] = 'O'
        print_board(board)

    print_board(board)
    result = evaluate(board)
    print("Draw!" if result == 0 else ("You win!" if result == -10 else "AI wins!"))

main()
